name: Deploy Swaplings app
on:
  push:
    branches:
      - master

jobs:
  # build_client_image_and_push_to_container_registry:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: ./client.Dockerfile
  #         push: true
  #         tags: |
  #           ghcr.io/${{ github.actor }}/client:latest

  build_server_image_and_push_to_container_registry:
    # needs: [build_client_image_and_push_to_container_registry]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./server.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.actor }}/server:latest

  perform_testing_for_fullstack:
    needs: [build_server_image_and_push_to_container_registry]
    runs-on: ubuntu-latest
    container: node:latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: swaplings
          POSTGRES_PASSWORD: possupossu
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      server:
        image: ghcr.io/${{ github.actor }}/server:latest
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 3001:3001
      client:
        image: ghcr.io/${{ github.actor }}/client:latest
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 3000:3000
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install node modules
        run: npm install
        working-directory: ./server
      - name: Install knex globally
        run: npm install -g knex
      - name: Perform migrations
        run: env NODE_ENV=deployment_test npx knex migrate:latest
        working-directory: ./server
      - name: Run server tests
        run: npm run deployment:test
        working-directory: ./server
      - name: Install node modules
        run: npm install
      - name: Rename deployment next env file
        run: mv deployment-next-env .env.local
      - name: Remove development cypress configuration file
        run: rm cypress.json
      - name: Rename cypress deployment configuration file
        run: mv deployment-cypress.json cypress.json
      - name: Install cypress
        run: npm install -g cypress --unsafe-perm --silent
      - name: Install cypress dependencies
        run: apt update && apt-get -y install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
      - name: Cypress tests
        run: npm run cypress:run
      - name: Install node modules
        run: npm install
      - name: Build
        run: npm run build
      - name: Run client tests (that require only client code)
        run: npm run test

  deploy_client_to_vercel:
    needs: [perform_testing_for_fullstack]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install node modules
        run: npm install
      - name: Build
        run: npm run build
      - name: Deploy to Vercel production
        uses: amondnet/vercel-action@v20
        id: deploy-vercel-production
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy_server_to_heroku:
    needs: [deploy_client_to_vercel]
    runs-on: ubuntu-latest
    # Working directory not set to server because heroku deploys the subfolder
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install node modules
        run: |
          cd server
          npm install
      # No need for build because of postinstall --->>> tsc script!
      - name: Deploy to Heroku production
        uses: onekiloparsec/heroku-node-deploy-subfolder@v1.1.0
        with:
          api_key: ${{ secrets.HEROKU_API_KEY }}
          app_name: ${{ secrets.HEROKU_APP_NAME }}
          email: ${{ secrets.HEROKU_EMAIL }}
          heroku_branch: 'master'
          subfolder: 'server'
